//Работает от -2000м до 1200000м над среднем уровнем моря. Реализованы функции
//get_p(h) - давление от высоты. Па
//get_T_K(h) - термодинамическая температура от высоты. К
//get_T_m(h) - молярная температура от высоты. К
//get_T_K_from_T_m(h, Tm) - термодинамическая температура от молярной и высоты. К
//get_mol_mass(h) - молярная масса от высоты. кг/кмоль
//get_concentration(h) - концентрация молекул воздуха от высоты. 1 / м^3
//get_g(h) - ускорение свободного падения от высоты. м / с^2
//get_h_geopot(h) - геопотенциальная высота от геометрической высоты. м
//get_a(h) - скорость звука от высоты. м / с
//get_density(h) - плотность от высоты. кг / м^3
//get_mu(h) - динамическая вязкость от высоты. Применимо для высот до 90000 м. Па * с
 
#ifndef G4401
#define G4401
#include <iostream>
#include <math.h>

//Математические нужды
double polinom_for_mol_mass_low_h(double h);
double polinom_for_mol_mass_medium_h(double h);
double polinom_for_mol_mass(double h, double B0, double B1, double B2, double B3);
double gradient_for_tempreture_T_m(double H_geopot, double H0_geopot, double T0_m, double betta_m);
double gradient_for_temperture_T_K(double h, double h0, double T0_K, double betta);
double pressure_equation_for_low_h(double p0, double H_geopot, double H0_geopot, double T_m, double T0_m, double T_K, double betta_m, double R, double g_c );
double polinom_for_concentration(double h, double A0, double A1, double A2, double A3, double A4, double m);
//Конец математических нужд


class GHOST4401{
public:

	void init();
	//Табличные данные из ГОСТ

	//Апроксимация молярной массы от высоты 
	//Интервалы больших высот для приближения молярной массы.
	double intervals_h_for_mol_mass[7] ={120000.0, 250000.0, 400000.0, 650000.0, 900000.0, 1050000.0, 1200000.0};

	//Коэффициенты полинома молярной массы на больших высотах
	double B[6][4] = {	{46.9083,  -29.71210 * pow(10, -5), 12.08693 * pow(10, -10), -1.85675 * pow(10,-15),},
						{40.4668,  -15.52722 * pow(10,-5),  3.55735 * pow(10,-10),   -3.02340 * pow(10,-16)}, 
						{6.3770,    6.25497 * pow(10,-5),   -1.10144 * pow(10,-10),   3.36907 * pow(10,-17)}, 
						{75.6896,  -17.61243 * pow(10,-5),  1.33603 * pow(10,-10),   -2.87884 * pow(10,-17)}, 
						{112.4838, -30.68086 * pow(10,-5),  2.90329 * pow(10,-10),   -9.20616 * pow(10,-17)}, 
						{9.8970,   -1.19732 * pow(10,-5),   7.78247 * pow(10,-12),   -1.77541 * pow(10,-18)}};
	//Конец данных необходимых для апроксимации


	//Апроксимация температуры(используется молярная) и давления от высоты (используется до высоты в 120000м)
	//Интервалы низких высот для температуры(молярной), давления
	double low_h_intervals[12] = {-1999.0, 0.0, 11019.0, 20063.0, 32162.0, 47350.0, 51412.0, 71802.0, 86152.0, 95411.0, 104128.0, 120000.0};

	//Начальное давление на низких высотных интервалах. Па
	double get_p0(int number_of_interval_h0);

	//Начальная молярная температура на низких высотных интервалах. К
	double get_T0_m(int number_of_interval_h0);

	//Бетта_м на начальных высотных интервалах (градиент молярной температуры от геопотенциальной высота). К / м
	double get_betta_m(int number_of_interval_h0);
	//Конец данных необходимых для апроксимации


	//Апроксимация температуры(используется сразу термодинамическое) на больших высотах. (от 120000м до 1200000м)
	//Интервалы для больших высот температуры(термодиначеской), давления
	double high_h_intervals[10] = {120000.0, 140000.0, 160000.0, 200000.0, 250000.0, 325000.0, 400000.0, 600000.0, 800000.0, 1200000.0};

	//Начальна термодинамическая температура на больших высотных интервалах. К
	double get_T0_K(int number_of_interval_h0);

	//Бетта на больших высотных интервалах (градиент термодинамической температуры от высоты). К / м
	double get_betta(int number_of_interval_h0);
	//Конец данных необходимых для апроксимации


	//Апроксимация концентрации на больших высотах (от 120000 м до 1200000 м)
	//Интервалы высот
	double intervals_h_for_concentration [10] = {120000.0, 150000.0, 200000.0, 250000.0, 350000.0, 450000.0, 600000.0, 800000.0, 1000000.0, 1200000.0};

	//Коэффициенты необходимые для апроксимации на интервалах
	double A[9][6] = 	{{0.210005867 * pow(10,4), -0.5618444757 * pow(10,-1), 0.5663986231 * pow(10,-6), -0.2547466858 * pow(10,-11), 0.4309844119 * pow(10, -17), 17},
						 {0.10163937 * pow(10,4),  -0.2119530830 * pow(10,-1), 0.1671627815 * pow(10,-6), -0.5894237068 * pow(10,-12), 0.7826684089 * pow(10,-18), 16},
						 {0.7631575 * pow(10,3),   -0.1150600844 * pow(10,-1), 0.6612598428 * pow(10,-7), -0.1708736137 * pow(10,-12), 0.1669823114 * pow(10,-18), 15},
						 {0.1882203 * pow(10,3),   -0.2265999519 * pow(10,-2), 0.1041726141 * pow(10,-7), -0.2155574922 * pow(10,-13), 0.1687430962 * pow(10,-19), 15},
						 {0.2804823 * pow(10,3),   -0.2432231125 * pow(10,-2), 0.8055024663 * pow(10,-8), -0.1202418519 * pow(10,-13), 0.6805101379 * pow(10,-20), 14},
						 {0.5599362 * pow(10,3),   -0.3714141392 * pow(10,-2), 0.9358870345 * pow(10,-8), -0.1058591881 * pow(10,-13), 0.4525531532 * pow(10,-20), 13},
						 {0.8358756 * pow(10,3),   -0.4265393073 * pow(10,-2), 0.8252842085 * pow(10,-8), -0.7150127437 * pow(10,-14), 0.2335744331 * pow(10,-20), 12},
						 {0.8364965 * pow(10,2),   -0.3162492458 * pow(10,-3), 0.4602064246 * pow(10,-9), -0.3021858469 * pow(10,-15), 0.7512304301 * pow(10,-22), 12},
						 {0.383220 * pow(10,2),    -0.50980 * pow(10,-4),      0.18100 * pow(10,-10),      0,                          0,                          11}};
	//Конец данных необходимых для апроксимации


	//Универсальная газовая постаянная. Дж / (К * кмоль)
	double R_universal; 

	//Молярная масса воздуха на уровне моря. кг / кмоль
	double Mol_mass;

	//Число Авагадро. 1 / кмоль
	double N_avagadro;

	//Удельная газовая постоянная. Дж / (кг * К) 
	double R;

	//Эмпирические коэффициенты Сатерлэнда. [S] = K, [Betta_s] = кг / (сек * м * К^0,5)
	double S;
	double Betta_s ;

	//Показатель адиабаты. X_adiabat = Cp / Cv
	double X_adiabat;

	//Эффективный диаметр молекул воздуха при столкновение. м 
	double Sigma_diametr;

	//Ускорения свободного падения на среднем уровне моря. м / с^2
	double g_c;

	//Условный радиус Земли, на котором ускорение свободного падения и вертикальный градиент ускорения на среднем уровне моря наиболее близки к истинным на широте 45°32'33". м 
	double Rad_of_Earth;

	//Геопотенциальная высота в зависимости от геометрической. м
	double get_h_geopot(double h);

	//Ускорение свободного падения от высоты. м / с^2
	double get_g(double h);

	//Молярная масса от высоты. кг / кмоль
	double get_mol_mass (double h);

	//Термодинамическая температура(обычная) от молярной тепературы. К
	double get_T_K_from_T_m(double h, double T_m);

	//Молярная температура от высоты. К
	double get_T_m(double h);

	//Температура от высоты, К
	double get_T_K(double h);

	//Давление от высоты на низких высотах, полученное линеаризацией температур. Па
	double get_p_low_h(double h);

	//Концентрация молекул от высоты. 1 / м^3
	double get_concentration(double h);

	//Давление от высоты. Па
	double get_p(double h);

	//Скорость звука от высоты. м/с
	double get_a(double h);

	//Плотность от высоты. кг / м^3
	double get_density(double h);

	//Динамическая вязкость от высоты. Применимо для высот до 90000 м. Па * с
	double get_mu(double h);


};
#endif