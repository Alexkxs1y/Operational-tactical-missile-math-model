#ifndef OTR_H
#define OTR_H

#include <iostream>
#include <math.h>
#include "4401-81.hpp"
#include <vector>
using namespace std;

class otr{
public:

	otr(); // Конструктор класса

	void init(double &_m, vector<double> &_J, double &_d, double &_l, double &_delta_max, double &_H0, double &_V0, 
				vector<double> &_angles, vector<double> &_speedAngles, vector<double> &_angleSpeed, vector<double> &_targetPosition, vector<double> &_airVelocity, GHOST4401 &_atm,
				vector<double> &_ssParamE, vector<double> &_ssParamN, vector<double> &_ssParamV); // Ввод начальных условий.

	void update(double &dt, int & i); // Шаг по времени в системе
	vector<double> get_res(double &dt, int & i); // Интегрирование с конечным ответом


private:

	/////////////////////////////////////////////////////////////////////////
	//							Атмосфера								   //
	/////////////////////////////////////////////////////////////////////////

	GHOST4401 atm;


	/////////////////////////////////////////////////////////////////////////
	//							Параметры ЛА							   //
	/////////////////////////////////////////////////////////////////////////

	double ksi_tar;
	double phi_tar;
	double t;
	double m; // Масса ЛА
	vector<double> J; // vector(3) Момент инерции Ла относительно связанных осей (Jx, Jy, Jz)
	double d; // Диаметр Миделя
	double l; // Длина ЛА
	double delta_max; // Максимальный угол отклонения рулей
	vector<double> ssParamE; // Параметры системы стабилизации по крену (Tss_e, ksi_ss_e)
	vector<double> ssParamN; // Параметры системы стабилизации по рысканью (Kss_n, ksi_ss_n)
	vector<double> ssParamV; // Параметры системы стабилизации по тангажу (Kss_v, ksi_ss_v)


	/////////////////////////////////////////////////////////////////////////
	//							Состояние ЛА							   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> stateVectorG; // vector(6) Координаты и скорости в НСК (x_g, y_g, z_g, V_xg, V_yg, V_zg)
	vector<double> angleVector; // vector(6) Углу и угловые скорости (gamma, psi, tetta, d_gamma, d_psi, d_tetta)
	vector<double> d_stateVectorG; // vector(6) Скорости и ускорения в НСК (V_xg, V_yg, V_zg, a_xg, a_yg, a_xg)
	vector<double> orientationVector; // vector(7) Параметры Родриго-Гамильтона и угловые скорости(ro, lambda, mu, nu, w_x, w_y, w_z)
	vector<double> d_orientationVector; // vector(7) Производные параметров Родриго-Гамильтона и угловые ускорения(d_ro, d_lambda, d_mu, d_nu, d_w_x, d_w_y, d_w_z)
	vector<double> targetParams; // vector(5) Углы цели по отношению к ЛА (phi, chi, r, xc, zc)
	vector<double> d_targetParams; // vector(3) Производные углов цели (d_phi, d_chi, d_r) 
	vector<double> speedAngles; // vector(2) Угол атаки и скольжения (alpha, betta)
	vector<double> airVelocity; // vector(3) Скорость ветра в НСК (V_airx, V_airy, V_airz)


	/////////////////////////////////////////////////////////////////////////
	//							Силы и моменты							   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> g; // vector(3) Ускорение свободного падения (g_x, g_y, g_z) = (0, 0, g)
	vector<double> aeroForces; // vector(3) Аэродинамические силы в скоростной СК (X, Y, Z)
	vector<double> aeroForces_G; // vector(3) Аэродинамические силы в НСК (X, Y, Z)
	vector<double> aeroTorque; // vector(3) Аэродинамические моменты сил (Mx, My, Mz)


	/////////////////////////////////////////////////////////////////////////
	//						Углы отклонения рулей						   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> delta; // vector(3) углы установуи рулей (deltae, deltan, deltav)


	/////////////////////////////////////////////////////////////////////////
	//					Коэффициенты уравнений управления				   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> Ke; // vector(2) коэффициенты управления по крену (K1_e, K2_e)
	vector<double> Kn; // vector(2) коэффициенты управления по рысканью (K1_n, K2_n)
	vector<double> Kv; // vector(2) коэффициенты управления по тангажу (K1_v, K2_v)


	/////////////////////////////////////////////////////////////////////////
	//				Коэффициенты передаточных функций из СС      		   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> ssE; // vector(2) Коэффициенты в СС по углу крена (Ke, Te)
	vector<double> ssN; // vector(4) Коэффициенты в СС по углу рысканья (Kn, T1n, Tn, ksin)
	vector<double> ssV; // vector(4) Коэффициенты в СС по углу тангажа (Kv, T1v, Tv, ksiv)


	/////////////////////////////////////////////////////////////////////////
	//						Динамические коэффициенты 					   //
	/////////////////////////////////////////////////////////////////////////

	vector<double> aDyn; // vector(5) Динамические коэффиценты для угла тангажа (a11, a12, a13, a42, a43)
	vector<double> bDyn; // vector(5) Динамические коэффиценты для угла рысканья (b11, b12, b13, b42, b43)
	vector<double> cDyn; // vector(2) Динамические коэффиценты для угла крена (c11, c13)


	/////////////////////////////////////////////////////////////////////////
	//								АДХ									   //
	/////////////////////////////////////////////////////////////////////////

	double cx; // Коэффициент аэродинамическое сопротивление
	vector<double> cy; // vector(3) Коэффициенты подъемной силы, первый - сумма двух (Cy, cy_alpha, cy_deltav) Cy - итоговыйкоэффициент
	vector<double> cz; // vector(3) Коэффициент боковой силы (Cz, cz_betta, cz_deltan) Сz - итоговый коэффициент
	vector<double> mx; // vector(3) Аэродиначический коэффицент момента x (Mx, mx_wx, mstab) Mx - итоговый коэффициент, mstab идёт дополнительно
	vector<double> my; // vector(4) Аэродинамические коэффицент момента y (My, my_wy, my_betta, my_deltan) My - итоговый коэффициент
	vector<double> mz; // vector(4) Аэродинамические характеристики (Mz, mz_wz, mz_alpha, mz_deltav) Mz - итоговый коэффициент


	/////////////////////////////////////////////////////////////////////////
	//					Дополнительные характеристики ЛА				   //
	/////////////////////////////////////////////////////////////////////////

	double Vref; // Относительная скорость потока
	double M; // Число Маха
	double q; // Скоростной напор
	double qs; // Коэффициент при ад силах
	double qsl; // Коэффициент про ад моментах


	/////////////////////////////////////////////////////////////////////////
	//				Определение углов и угловых скоростей				   //*************************************************************************************
	/////////////////////////////////////////////////////////////////////////

	void init_angleVector(); // Подсчёт углов Эйлера и их производных из параметров Родриго-Гамильтона !!!Считать до интегрирования!!!
	void init_speedAngles(); // Подсчёт угла атаки и скольжения. !!! Считать до АДХ !!!


	/////////////////////////////////////////////////////////////////////////
	//				Подсчёт доп. характеристик ЛА						   //
	/////////////////////////////////////////////////////////////////////////

	void init_extra_params(); // Инициализация дополнительных характеристик ЛА


	/////////////////////////////////////////////////////////////////////////
	//						Подсчёт АДХ									   //
	/////////////////////////////////////////////////////////////////////////
	
	void init_cx(); // Инициализация коэффициентов сопротивления
	void init_cy(); // Инициализация коэффициентов подъёмной силы
	void init_cz(); // Инициализация коэффициентов боковой силы
	void init_mx(); // Инициализация коэффициентов ад момента отн х
	void init_my(); // Инициализация коэффициентов ад момента отн y
	void init_mz(); // Инициализация коэффициентов ад момента отн z
	void init_adch(); // Прогон всех функций инициализации адх
	void init_integral_adch(); // Подсчёт интегральных коэффициентов


	/////////////////////////////////////////////////////////////////////////
	//				Подсчёт динамических коэффициентов					   //
	/////////////////////////////////////////////////////////////////////////

	void init_aDyn(); // Инициализация динамических коэффициентов по каналу тангажа
	void init_bDyn(); // Инициализация динамических коэффициентов по каналу рысканья
	void init_cDyn(); // Инициализация динамических коэффициентов по каналу крена
	void init_Dyn(); // Прогон всех функций инициализации динамических коэффициентов

	/////////////////////////////////////////////////////////////////////////
	//			Подсчёт коэффициентов передаточных функций СС 			   //
	/////////////////////////////////////////////////////////////////////////

	void init_ssV(); // Инициализация коэффициентов СС по каналу тангажа
	void init_ssN(); // Инициализация коэффициентов СС по каналу рысканья
	void init_ssE(); // Инициализация коэффициентов СС по каналу крена
	void init_ss(); // Прогон всех функций инициализации коэффициентов СС


	/////////////////////////////////////////////////////////////////////////
	//				Подсчёт коэффициентов уравнений управления			   //
	/////////////////////////////////////////////////////////////////////////

	void init_Ke(); // Инициализация коэффициентов уравнений управления по каналу крена
	void init_Kn(); // Инициализация коэффициентов уравнений управления по каналу рысканья
	void init_Kv(); // Инициализация коэффициентов уравнений управления по каналу тангажа
	void init_K(); // Прогон всех функций инициализации коэффициентов уравнений управления


	/////////////////////////////////////////////////////////////////////////
	//						Подсчёт углов отклонения рулей				   //
	/////////////////////////////////////////////////////////////////////////

	void init_delta(); // Инициализация углов управления. !!!Перед использование, необходимо обязательно проинициализировать d_targetParams!!!


	/////////////////////////////////////////////////////////////////////////
	//						Подсчёт сил и моментов						   //
	/////////////////////////////////////////////////////////////////////////

	void init_g(); // Инициализация силы тяжести
	void init_aeroForces(); // Инициализация ад сил
	void init_aeroForces_G(); // Пересчет АД сил из связанной СК в НСК
	void init_aeroTorque(); // Подсчёт АД моментов
	void init_forceAndTorque(); // Прогон всех функций подсчета сил и моментов


	/////////////////////////////////////////////////////////////////////////
	//	Подсчёт производных состояния ЛА, также определение углов 		   //	  
	/////////////////////////////////////////////////////////////////////////

	void calc_d_stateVectorG(); // Инициализация скоростей и подсчет ускорений в НСК
	void calc_d_orientationVector(); // Подсчет производных параметров Родриго-Гамильтона и угловых скоростей
	void calc_d_targetParams(); // Подсчет производных углов изменения цели !!!Считать до init_delta!!!
	void calc_d_dt(); // Прогон всех функций производных


	/////////////////////////////////////////////////////////////////////////
	//							Интегрирование						  	   //
	/////////////////////////////////////////////////////////////////////////

	void integ_stateVectorG(double &dt); // Подсчёт нового положения ЛА
	void integ_orientationVector(double &dt); // Подсчёт нового вектора ориентации
	void integ_targetParams(double &dt); // Подсчёт новых углов цели
	void integrate(double &dt); // Интегрирование нового положения


	/////////////////////////////////////////////////////////////////////////
	//								Доп  								   //
	/////////////////////////////////////////////////////////////////////////

	void first_init_RodGam(); // Первая инициализация параметров Родрига-Гамильтона через углу ориентации.


	/////////////////////////////////////////////////////////////////////////
	//						Глобальные функции							   //  
	/////////////////////////////////////////////////////////////////////////

	void init_step_params(); // Подсчёт параметров на новом шаге

};

#endif